name: frontend

on:
  push:
    branches:
      - "*"
    tags:
      - "v*.*.*"
    paths:
      - "source/**"

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      DEEPFENCE_API_KEY: ${{ secrets.DEEPFENCE_API_KEY }}
      DEEPFENCE_CONSOLE_IP: console.do.deepfence.net
      DEEPFENCE_PASSWORD: ${{ secrets.DEEPFENCE_PASSWORD }}
      DEEPFENCE_USERNAME: ${{ secrets.DEEPFENCE_USERNAME }}
      REGISTRY: registry.deepfence.net
      REGISTRY_PASSWORD: ${{ secrets.REGISTRY_PASSWORD }}
      REGISTRY_USERNAME: ${{ secrets.REGISTRY_USERNAME }}
      REPO_NAME: frontend
      SLACK_WEBHOOK: ${{ secrets.SLACK_WEBHOOK }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v2
      - name: Prepare tag name
        id: prep
        env:
          DOCKER_IMAGE: ${{ env.REGISTRY }}/${{ env.REPO_NAME }}
        run: |
          DOCKER_IMAGE=${DOCKER_IMAGE}
          if [[ ${GITHUB_REF} == refs/heads/* ]]; then
            VERSION=$(echo ${GITHUB_REF#refs/heads/*} | sed -r 's#/+#-#g')
            if [[ ${VERSION} == master ]]; then
              VERSION=latest
            fi
          elif [[ ${GITHUB_REF} == refs/tags/* ]]; then
            VERSION=${GITHUB_REF#refs/tags/}
          else
            VERSION=edge
          fi
          TAGS="${DOCKER_IMAGE}:${VERSION}"
          echo ::set-output name=version::${VERSION}
          echo ::set-output name=tags::${TAGS}
          echo ::set-output name=created::$(date -u +'%Y-%m-%dT%H:%M:%SZ')
      - name: Login to Docker registry
        uses: docker/login-action@v1
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ env.REGISTRY_USERNAME }}
          password: ${{ env.REGISTRY_PASSWORD }}
      - name: Build Docker image
        uses: docker/build-push-action@v2
        if: startsWith(github.ref, 'refs/heads/') || startsWith(github.ref, 'refs/tags/v')
        with:
          push: false
          context: ./source
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
      - name: Scan image with Deepfence Vulnerability Mapper
        env:
          FAIL_CVE_COUNT: 50
          FAIL_CVE_SCORE: 8
          FULL_IMAGE_NAME: ${{ steps.prep.outputs.tags }}
        run: |
          mkdir deepfence_docker
          docker_config_path="$(pwd)/deepfence_docker"
          docker_creds=$(echo -n "${DEEPFENCE_USERNAME}:${DEEPFENCE_PASSWORD}" | base64)
          echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$docker_creds\"}}}" > "$docker_config_path/config.json"
          docker --config "$docker_config_path" pull deepfenceio/deepfence_vulnerability_mapper:latest
          rm -rf deepfence_docker
          docker run --rm --net=host --privileged=true --cpus='0.3' -v /var/run/docker.sock:/var/run/docker.sock:rw \
              deepfenceio/deepfence_vulnerability_mapper:latest \
              -mgmt-console-ip=${DEEPFENCE_CONSOLE_IP} \
              -deepfence-key=${DEEPFENCE_API_KEY} \
              -image-name=${FULL_IMAGE_NAME} \
              -fail-cve-count=${FAIL_CVE_COUNT} \
              -fail-cve-score=${FAIL_CVE_SCORE} \
              -scan-type="base"
      - name: Send Slack message on vulnerability scan failure
        env:
          FULL_IMAGE_NAME: ${{ steps.prep.outputs.tags }}
        if: ${{ failure() }}
        run: |
          curl ${SLACK_WEBHOOK} -X POST \
            -d "{\"text\":\"${FULL_IMAGE_NAME} failed vulnerability scanning. Click <https://${DEEPFENCE_CONSOLE_IP}|here> for details.\"}"
          exit 1
      - name: Upload vulnerability scan data to console
        env:
          FAIL_CVE_COUNT: 1000
          FAIL_CVE_SCORE: 10
          FULL_IMAGE_NAME: ${{ steps.prep.outputs.tags }}
        if: ${{ failure() }}
        run: |
          mkdir deepfence_docker
          docker_config_path="$(pwd)/deepfence_docker"
          docker_creds=$(echo -n "${DEEPFENCE_USERNAME}:${DEEPFENCE_PASSWORD}" | base64)
          echo "{\"auths\":{\"https://index.docker.io/v1/\":{\"auth\":\"$docker_creds\"}}}" > "$docker_config_path/config.json"
          docker --config "$docker_config_path" pull deepfenceio/deepfence_vulnerability_mapper:latest
          rm -rf deepfence_docker
          docker run --rm --net=host --privileged=true --cpus='0.3' -v /var/run/docker.sock:/var/run/docker.sock:rw \
              deepfenceio/deepfence_vulnerability_mapper:latest \
              -mgmt-console-ip=${DEEPFENCE_CONSOLE_IP} \
              -deepfence-key=${DEEPFENCE_API_KEY} \
              -image-name=${FULL_IMAGE_NAME} \
              -fail-cve-count=${FAIL_CVE_COUNT} \
              -fail-cve-score=${FAIL_CVE_SCORE} \
              -scan-type="base"
          exit 1
      - name: Push image to registry
        uses: docker/build-push-action@v2
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/heads/v') || startsWith(github.ref, 'refs/tags/v')
        with:
          push: true
          context: ./source
          tags: ${{ steps.prep.outputs.tags }}
          labels: |
            org.opencontainers.image.source=${{ github.event.repository.html_url }}
            org.opencontainers.image.created=${{ steps.prep.outputs.created }}
            org.opencontainers.image.revision=${{ github.sha }}
